name: CD Pipeline

on:  
  release:
    types: [published]

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  
jobs:
  deploy:
    environment: mcce22-smart-office-staging
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./src/Mcce22.SmartOffice.Terraform/
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Publish Mcce22.SmartOffice.Bookings
        run: dotnet publish ../Mcce22.SmartOffice.Bookings/ -c Release -r linux-x64 --sc false
      - name: Publish Mcce22.SmartOffice.DataIngress
        run: dotnet publish ../Mcce22.SmartOffice.DataIngress/ -c Release -r linux-x64 --sc false
      - name: Publish Mcce22.SmartOffice.DeviceActivator
        run: dotnet publish ../Mcce22.SmartOffice.DeviceActivator/ -c Release -r linux-x64 --sc false
      - name: Publish Mcce22.SmartOffice.Notifications
        run: dotnet publish ../Mcce22.SmartOffice.Notifications/ -c Release -r linux-x64 --sc false
      - name: Publish Mcce22.SmartOffice.Users
        run: dotnet publish ../Mcce22.SmartOffice.Users/ -c Release -r linux-x64 --sc false
      - name: Publish Mcce22.SmartOffice.Workspaces
        run: dotnet publish ../Mcce22.SmartOffice.Workspaces/ -c Release -r linux-x64 --sc false
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=${{ vars.MCCE22_TF_STATE_BUCKET }}"
      - name: Terraform format
        id: fmt
        run: terraform fmt -check
      - name: Terraform validate
        id: validate
        run: terraform validate
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_access_key=${{ secrets.AWS_SECRET_KEY }}" -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" -var "mcce22_tf_state_bucket=${{ vars.MCCE22_TF_STATE_BUCKET }}" -var "mcce22_smpt_host=${{ vars.MCCE22_SMTP_HOST }}" -var "mcce22_smpt_port=${{ vars.MCCE22_SMTP_PORT }}" -var "mcce22_smpt_username=${{ vars.MCCE22_SMTP_USERNAME }}" -var "mcce22_smpt_password=${{ secrets.MCCE22_SMTP_PASSWORD }}" -var "mcce22_smpt_sendername=${{ vars.MCCE22_SMTP_SENDERNAME }}" -var "mcce22_iam_role=${{ vars.MCCE22_IAM_ROLE }}" 
      - name: Terraform Apply        
        run: terraform apply -auto-approve -input=false  -var "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_secret_access_key=${{ secrets.AWS_SECRET_KEY }}" -var "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" -var "mcce22_tf_state_bucket=${{ vars.MCCE22_TF_STATE_BUCKET }}" -var "mcce22_smpt_host=${{ vars.MCCE22_SMTP_HOST }}" -var "mcce22_smpt_port=${{ vars.MCCE22_SMTP_PORT }}" -var "mcce22_smpt_username=${{ vars.MCCE22_SMTP_USERNAME }}" -var "mcce22_smpt_password=${{ secrets.MCCE22_SMTP_PASSWORD }}" -var "mcce22_smpt_sendername=${{ vars.MCCE22_SMTP_SENDERNAME }}" -var "mcce22_iam_role=${{ vars.MCCE22_IAM_ROLE }}"
