name: CI/CD Pipeline

on: push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results
  checks: write # for test-reporter

jobs:
  build:
    name: "Build projects"
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup Package Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\.nuget\packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: dotnet tests
          path: "**/test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true

  analyse:
    name: "Analyse source code"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.projectKey=mcce22extreme_ss2023-ineni-smart-office
            -Dsonar.organization=mcce22extreme

  validateterraform:
    name: "Validate terraform depl"
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        shell: bash
        working-directory: ./.terraform/
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: terraform init
        run: terraform init -backend-config="resource_group_name=${{ vars.AZURE_RESOURCEGROUP_NAME }}" -backend-config="storage_account_name=${{ vars.AZURE_TFSTATE_STORAGEACCOUNT }}" -backend-config="container_name=${{ vars.AZURE_TFSTATE_CONTAINER }}"

      - name: terraform validate
        run: terraform validate -no-color

      - name: terraform plan
        run: terraform plan -no-color -var "azure_location=${{ vars.AZURE_LOCATION }}" -var "azure_resourcegroup=${{ vars.AZURE_RESOURCEGROUP_NAME }}" -var "smartoffice_mqtt_username=${{ secrets.SMARTOFFICE_MQTT_USERNAME}}" -var "smartoffice_mqtt_password=${{ secrets.SMARTOFFICE_MQTT_PASSWORD}}" -var "smartoffice_dbadmin_username=${{ secrets.SMARTOFFICE_DBADMIN_USERNAME}}" -var "smartoffice_dbadmin_password=${{ secrets.SMARTOFFICE_DBADMIN_PASSWORD}}"

  deployinfrastructure:
    name: "Deploy infrastructure"
    runs-on: ubuntu-latest
    needs: validateterraform
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        shell: bash
        working-directory: ./.terraform/
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: terraform init
        run: terraform init -backend-config="resource_group_name=${{ vars.AZURE_RESOURCEGROUP_NAME }}" -backend-config="storage_account_name=${{ vars.AZURE_TFSTATE_STORAGEACCOUNT }}" -backend-config="container_name=${{ vars.AZURE_TFSTATE_CONTAINER }}"

      - name: terraform apply
        run: terraform apply -auto-approve -no-color -var "azure_location=${{ vars.AZURE_LOCATION }}" -var "azure_resourcegroup=${{ vars.AZURE_RESOURCEGROUP_NAME }}" -var "smartoffice_mqtt_username=${{ secrets.SMARTOFFICE_MQTT_USERNAME}}" -var "smartoffice_mqtt_password=${{ secrets.SMARTOFFICE_MQTT_PASSWORD}}" -var "smartoffice_dbadmin_username=${{ secrets.SMARTOFFICE_DBADMIN_USERNAME}}" -var "smartoffice_dbadmin_password=${{ secrets.SMARTOFFICE_DBADMIN_PASSWORD}}"

      - name: Retrieve acr information
        id: acrinformation
        run: |
          echo "ACR_NAME=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT

    outputs:
      ACR_NAME: ${{ steps.acrinformation.outputs.ACR_NAME }}
      ACR_LOGIN_SERVER: ${{ steps.acrinformation.outputs.ACR_LOGIN_SERVER }}

  buildanddeploydockerimages:
    name: "Build and deploy docker images"
    runs-on: ubuntu-latest
    needs: [analyse, deployinfrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: "5.12.0"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: "gitversion.yaml"
          updateAssemblyInfo: true

      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ needs.deployinfrastructure.outputs.ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_AD_CLIENT_ID }}
          password: ${{ secrets.AZURE_AD_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ needs.deployinfrastructure.outputs.ACR_LOGIN_SERVER }}/mcce-smart-office-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ needs.deployinfrastructure.outputs.ACR_LOGIN_SERVER }}/mcce-smart-office-api:latest
          file: src/Mcce.SmartOffice.Api/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"
