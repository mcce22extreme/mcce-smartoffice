name: CI/CD Pipeline

on: push

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results
  checks: write # for test-reporter

jobs:
  build:
    name: "Build projects"
    runs-on: windows-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: dotnet tests
          path: "**/test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true

      - name: Install helm
        uses: azure/setup-helm@v3

      - name: Validate helm chart
        shell: bash
        run: |
          helm lint .helm/ --values .helm/values.azure.yaml

  analyse:
    name: "Analyse projects"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.projectKey=mcce22extreme_ss2023-ineni-smart-office
            -Dsonar.organization=mcce22extreme

  builddockerimages:
    name: "Build docker images"
    runs-on: ubuntu-latest
    needs: analyse
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: "5.12.0"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: "gitversion.yaml"
          updateAssemblyInfo: true

      - name: Display GitVersion outputs (step output)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

      - name: "Docker Login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_AD_CLIENT_ID }}
          password: ${{ secrets.AZURE_AD_CLIENT_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build apigateway docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-apigateway:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-apigateway:latest
          file: src/Mcce.SmartOffice.ApiGateway/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

      - name: Build account api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-account-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-account-api:latest
          file: src/Mcce.SmartOffice.Accounts/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

      - name: Build user image api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-userimage-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-userimage-api:latest
          file: src/Mcce.SmartOffice.UserImages/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

      - name: Build workspace api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-workspace-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-workspace-api:latest
          file: src/Mcce.SmartOffice.Workspaces/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

      - name: Build workspace configuration api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-workspaceconfiguration-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-workspaceconfiguration-api:latest
          file: src/Mcce.SmartOffice.WorkspaceConfigurations/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

      - name: Build workspace configuration api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-workspacedataentry-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-workspacedataentry-api:latest
          file: src/Mcce.SmartOffice.WorkspaceDataEntries/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

      - name: Build booking api docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-booking-api:${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }},${{ secrets.AZURE_ACR_LOGIN_SERVER }}/mcce-smart-office-booking-api:latest
          file: src/Mcce.SmartOffice.Bookings/Dockerfile
          build-args: |
            BUILD_VERSION=${{ steps.gitversion.outputs.majorMinorPatch }}"
            COMMIT_SHA=${{ steps.gitversion.outputs.shortSha }}"

  deploy:
    name: "Deploy to aks"
    needs: builddockerimages
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: "5.12.0"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: "gitversion.yaml"
          updateAssemblyInfo: true

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Initialize aks context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.AZURE_RESOURCEGROUP_NAME }}
          cluster-name: ${{ vars.AZURE_CLUSTER_NAME }}

      - name: Install helm
        uses: azure/setup-helm@v3

      - name: Deploy nginx
        shell: bash
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade ingress-nginx ingress-nginx/ingress-nginx --install --namespace ${{ vars.AZURE_AKS_NAMESPACE }} --set controller.replicaCount=1 --create-namespace --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="${{ vars.SMARTOFFICE_API_DNS_LABEL }}"

      - name: Deploy certmanager
        shell: bash
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade cert-manager jetstack/cert-manager --install --namespace ${{ vars.AZURE_AKS_NAMESPACE }} --create-namespace --version v1.7.1 --set installCRDs=true --set nodeSelector."kubernetes\.io/os"=linux

      - name: Deploy mosquitto
        shell: bash
        run: |
          helm repo add t3n https://storage.googleapis.com/t3n-helm-charts
          helm upgrade mosquitto t3n/mosquitto --version 2.4.1 --install --namespace ${{ vars.AZURE_AKS_NAMESPACE }} --create-namespace --set service.type=LoadBalancer --set 'authentication.passwordEntries=${{ secrets.MOSQUITTO_PASSWORD }}' --set 'service.annotations.service\.beta\.kubernetes\.io/azure-dns-label-name=${{ vars.SMARTOFFICE_MOSQUITTO_DNS_LABEL }}'

      - name: Deploy smartoffice
        shell: bash
        run: |
          helm upgrade smartoffice .helm/ --install --values .helm/values.azure.yaml --namespace ${{ vars.AZURE_AKS_NAMESPACE }} --create-namespace --set configUrl=${{ vars.SMARTOFFICE_CONFIG_URL }} --set registryName=${{ secrets.AZURE_ACR_LOGIN_SERVER }} --set 'imageTag=${{ steps.gitversion.outputs.majorMinorPatch }}-${{ steps.gitversion.outputs.shortSha }}' --set 'apiGateway.dnsLabel=${{ vars.SMARTOFFICE_API_DNS_LABEL }}'
